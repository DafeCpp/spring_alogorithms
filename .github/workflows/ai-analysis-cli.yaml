name: AI Simple Analysis

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

jobs:
  ai-simple:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Simple AI Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import os
          import requests
          import json
          import subprocess
          import re

          def get_changed_files():
              try:
                  result = subprocess.run(['git', 'diff', '--name-only', 'HEAD~1'],
                                        capture_output=True, text=True, check=True)
                  return [f for f in result.stdout.strip().split('\n') if f]
              except subprocess.CalledProcessError:
                  return []

          def read_file_content(file_path):
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      return f.read()
              except Exception as e:
                  return f'Error reading file: {e}'

          def simple_analysis(files_content):
              lines = files_content.split('\\n')
              issues = []
              suggestions = []
              good_practices = []

              patterns = {
                  'memory_leak': (r'new\\s+\\w+\\s*[^;]*$', 'Potential memory leak - new without delete'),
                  'unsafe_function': (r'(strcpy|strcat|gets|scanf)\\s*\\(', 'Unsafe function usage'),
                  'long_line': (r'.{120,}', 'Line too long (>120 characters)'),
                  'namespace_std': (r'using\\s+namespace\\s+std;', 'Avoid using namespace std in headers'),
                  'goto': (r'goto\\s+\\w+', 'Avoid using goto statements'),
                  'magic_number': (r'\\b\\d{3,}\\b', 'Consider using named constants'),
                  'raw_pointer': (r'\\w+\\s*\\*\\s*\\w+\\s*=', 'Consider using smart pointers'),
                  'efficient_container': (r'std::vector<\\w+>\\s+\\w+\\s*;', 'Good: Using std::vector'),
                  'smart_pointer': (r'std::(unique_ptr|shared_ptr)<\\w+>', 'Good: Using smart pointers'),
                  'const_reference': (r'const\\s+\\w+&\\s+\\w+', 'Good: Using const references'),
                  'range_based_for': (r'for\\s*\\(\\s*auto\\s*&?\\s*\\w+\\s*:', 'Good: Using range-based for loop')
              }

              for i, line in enumerate(lines, 1):
                  line = line.strip()

                  for pattern_name, (regex, message) in patterns.items():
                      if re.search(regex, line):
                          if pattern_name.startswith('good_'):
                              good_practices.append(f'Line {i}: {message}')
                          elif pattern_name in ['memory_leak', 'unsafe_function', 'goto']:
                              issues.append(f'Line {i}: {message}')
                          else:
                              suggestions.append(f'Line {i}: {message}')
                          break

              result = '## ðŸ¤– AI Code Analysis\\n\\n'

              if issues:
                  result += '### ðŸš¨ Issues Found\\n'
                  for issue in issues[:3]:
                      result += f'- {issue}\\n'
                  result += '\\n'

              if suggestions:
                  result += '### ðŸ’¡ Suggestions\\n'
                  for suggestion in suggestions[:3]:
                      result += f'- {suggestion}\\n'
                  result += '\\n'

              if good_practices:
                  result += '### âœ… Good Practices\\n'
                  for practice in good_practices[:3]:
                      result += f'- {practice}\\n'
                  result += '\\n'

              if not issues and not suggestions:
                  result += '### âœ… Code Quality Assessment\\n'
                  result += 'No obvious issues found. Code follows basic C++ practices.\\n\\n'

              result += '---\\n*AI-powered pattern analysis completed*'

              return result

          def post_comment(analysis_text):
              if not os.getenv('GITHUB_TOKEN'):
                  print('GITHUB_TOKEN not available')
                  return

              headers = {
                  'Authorization': f'token {os.getenv(\"GITHUB_TOKEN\")}',
                  'Accept': 'application/vnd.github.v3+json'
              }

              comment_body = f'''
              {analysis_text}
              '''

              pr_number = None
              if os.getenv('GITHUB_EVENT_PATH'):
                  try:
                      with open(os.getenv('GITHUB_EVENT_PATH'), 'r') as f:
                          event_data = json.load(f)
                          pr_number = event_data['pull_request']['number']
                  except Exception as e:
                      print(f'Error reading event data: {e}')

              if pr_number:
                  url = f'https://api.github.com/repos/{os.getenv(\"GITHUB_REPOSITORY\")}/issues/{pr_number}/comments'
                  try:
                      response = requests.post(url, headers=headers, json={'body': comment_body})
                      response.raise_for_status()
                      print('AI analysis posted successfully')
                  except Exception as e:
                      print(f'Failed to post comment: {e}')
                      # Try alternative approach
                      try:
                          alt_url = f'https://api.github.com/repos/{os.getenv(\"GITHUB_REPOSITORY\")}/pulls/{pr_number}/reviews'
                          review_data = {
                              'body': comment_body,
                              'event': 'COMMENT'
                          }
                          response = requests.post(alt_url, headers=headers, json=review_data)
                          response.raise_for_status()
                          print('AI analysis posted as review')
                      except Exception as e2:
                          print(f'Failed to post review: {e2}')

          # Main execution
          changed_files = get_changed_files()
          if changed_files:
              cpp_files = [f for f in changed_files if f.endswith(('.cpp', '.h', '.hpp', '.cc', '.cxx'))]

              if cpp_files:
                  files_content = ''
                  for file_path in cpp_files:
                      content = read_file_content(file_path)
                      files_content += f'\\n\\n--- {file_path} ---\\n{content}'

                  analysis_result = simple_analysis(files_content)
                  post_comment(analysis_result)
              else:
                  print('No C++ files found in changes')
          else:
              print('No files changed')
          "

      - name: Success Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## âœ… AI Analysis Completed!\\n\\nPattern-based analysis has been performed on your C++ code.\\n\\nCheck the logs above for detailed results.\\n\\n---\\n*Powered by AI pattern analysis*'
              });
            } catch (error) {
              console.log('Could not post success comment:', error.message);
            }